Ce projet illustre l’utilisation de différentes structures de listes chaînées en C avec un menu interactif :

Liste simplement chaînée (SLL)
Liste doublement chaînée (DLL)
Liste simplement chaînée circulaire (CSLL)
Liste doublement chaînée circulaire (CDLL)

Chaque type de liste dispose de fonctions d’insertion, d’affichage et de suppression.

 Organisation du projet
├── main.c        # Contient le menu principal et la boucle de gestion
├── list.h        # Déclarations des structures et prototypes des fonctions
├── list.c        # Implémentations des fonctions de manipulation de listes
└── README.md     # Documentation du projet

1. Liste simplement chaînée (SLL)
Structure
Chaque nœud contient :une valeur (int),un pointeur next vers le nœud suivant.La fin de la liste est marquée par NULL.

Fonctions principales
 insertSortedSLL
Objectif : insérer une valeur dans la liste de manière triée.
Fonctionnement :
Crée et alloue un nouveau nœud.
Si la liste est vide ou que la valeur est plus petite que la tête, insertion en tête.
Sinon, on parcourt jusqu’à trouver l’emplacement correct puis on insère.

deleteOccurrencesSLL
Objectif : supprimer toutes les occurrences d’une valeur donnée.
Fonctionnement :
Parcours de la liste avec deux pointeurs (prec et courant).
Si la valeur est trouvée, on libère le nœud et on met à jour les pointeurs.

printSLL
Affiche la liste sous la forme :
val1 -> val2 -> ... -> NULL

2. Liste doublement chaînée (DLL)
Structure
Chaque nœud contient :
une valeur (int),
un pointeur next vers le nœud suivant,
un pointeur prev vers le nœud précédent.

Fonctions principales
insertSortedDLL
Objectif : insérer une valeur dans l’ordre croissant.
Fonctionnement :
Création d’un nouveau nœud.
Si la liste est vide ou que la valeur doit aller en tête → insertion au début.
Sinon, parcours jusqu’à trouver l’emplacement, puis mise à jour des liens prev et next.

printDLL
Affiche la liste sous la forme :
NULL <- val1 <-> val2 <-> val3 -> NULL

3. Liste simplement chaînée circulaire (CSLL)
Structure
Chaque nœud contient :
une valeur (int),
un pointeur next vers le nœud suivant.
La particularité est que le dernier nœud pointe vers le premier, ce qui rend la liste circulaire.

Fonctions principales
insertHeadCSLL

Objectif : insérer une valeur en tête.
Fonctionnement :
Si la liste est vide → le nœud pointe sur lui-même.
Sinon, on insère avant la tête et on met à jour le pointeur du dernier pour qu’il pointe vers le nouveau nœud.
insertTailCSLL
Objectif : insérer une valeur en queue.
Fonctionnement :
Si la liste est vide → le nœud pointe sur lui-même.
Sinon, on insère après le dernier et on relie à la tête.
printCSLL
Parcourt la liste en affichant les valeurs jusqu’à revenir à la tête :
val1 -> val2 -> val3 -> (retour à la tête)

4. Liste doublement chaînée circulaire (CDLL)
Structure Chaque nœud contient : une valeur (int),
un pointeur next vers le nœud suivant,
un pointeur prev vers le nœud précédent.

La liste est circulaire : le dernier nœud pointe sur le premier (next), le premier nœud pointe sur le dernier (prev).
Fonctions principales
insertHeadCDLL
Objectif : insérer une valeur en tête.
Fonctionnement :
Si la liste est vide → le nœud pointe sur lui-même.
Sinon, on récupère le dernier (head->prev), puis : new->next = head, new->prev = tail, mise à jour des liens du tail et de l’ancien head, head = new.

insertTailCDLL
Objectif : insérer une valeur en queue.
Fonctionnement : Si la liste est vide → le nœud pointe sur lui-même. Sinon, on récupère le dernier (head->prev), puis : new->next = head, new->prev = tail,
mise à jour des pointeurs,la tête ne change pas.

printCDLL
Affiche la liste dans les deux sens si nécessaire, tout en respectant la circularité.
